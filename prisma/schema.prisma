// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ForbiddenWord {
  id   String @id @default(uuid())
  word String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id           String   @id
  username     String
  profileImage String
  gender       String
  dateOfBirth  DateTime
  city         String
  state        String
  description  String

  photoGallery Photo[]

  sourceLikes Like[] @relation("source")
  targetLikes Like[] @relation("target")

  conversationsOne Conversation[] @relation("participantOneConversations")
  conversationsTwo Conversation[] @relation("participantTwoConversations")
  sentMessages     Message[]

  reported Report[]       @relation("reportedMember")
  reports  Report[]       @relation("reporter")
  bans     BannedMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id         String  @id @default(uuid())
  memberId   String
  image      String
  isApproved Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceMemberId String
  sourceMember   Member @relation("source", fields: [sourceMemberId], references: [id], onDelete: Cascade)
  targetMemberId String
  targetMember   Member @relation("target", fields: [targetMemberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([sourceMemberId, targetMemberId])
}

model Conversation {
  id               String    @id @default(cuid())
  participantOneId String
  participantTwoId String
  messages         Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantOne Member @relation("participantOneConversations", fields: [participantOneId], references: [id], onDelete: Cascade)
  participantTwo Member @relation("participantTwoConversations", fields: [participantTwoId], references: [id], onDelete: Cascade)

  @@unique([participantOneId, participantTwoId])
}

model Message {
  id             String  @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  isRead         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender       Member       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Report {
  id             String @id @default(cuid())
  contentType    String
  contentId      String
  contentOwnerId String
  report         String
  reporterId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportedMember Member @relation("reportedMember", fields: [contentOwnerId], references: [id], onDelete: Cascade)
  reporter       Member @relation("reporter", fields: [reporterId], references: [id], onDelete: Cascade)
}

model BannedMember {
  id             String   @id @default(cuid())
  bannedMemberId String
  banReason      String
  banDate        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bannedMember Member @relation(fields: [bannedMemberId], references: [id], onDelete: Cascade)
}
